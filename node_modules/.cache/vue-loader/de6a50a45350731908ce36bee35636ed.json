{"remainingRequest":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zachjohnson/Desktop/Projects/Committed Unity/src/components/MeetingStatusPanel.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/src/components/MeetingStatusPanel.vue","mtime":1699554717791},{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/css-loader/dist/cjs.js","mtime":1699554827634},{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1699554827893},{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/postcss-loader/src/index.js","mtime":1699554827541},{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/cache-loader/dist/cjs.js","mtime":1699554827551},{"path":"/Users/zachjohnson/Desktop/Projects/Committed Unity/node_modules/vue-loader/lib/index.js","mtime":1699554827697}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52LXRyZWV2aWV3LW5vZGVfX3Jvb3QgLnYtdHJlZXZpZXctbm9kZV9fcHJlcGVuZCB7CiAgbWluLXdpZHRoOiAwOwp9Cg=="},{"version":3,"sources":["MeetingStatusPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA","file":"MeetingStatusPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-treeview dense :items=\"items\" open-on-click>\n    <template v-slot:prepend=\"{ item }\">\n      <div v-if=\"!item.children\">\n        <!-- If they are not an admin and have a badge (badge[0] !== None and it is truthy) -->\n        <v-badge\n          left\n          v-if=\"\n            !item.isAdmin &&\n            item.name !== 'None' &&\n            item.badges[0] !== 'None' &&\n            item.badges[0]\n          \"\n          icon=\"mdi-trophy\"\n          bordered\n          overlap\n          :color=\"badgeColors[item.badges[0]]\"\n        >\n          <v-avatar color=\"blue darken-1\" size=\"36\" class=\"white--text text-h7\">\n            {{ initials(item.firstName, item.lastName) }}\n          </v-avatar>\n        </v-badge>\n        <!-- If they are not an admin and don't have a badge -->\n        <v-avatar\n          color=\"blue darken-1\"\n          size=\"36\"\n          class=\"white--text text-h7\"\n          v-if=\"\n            !item.isAdmin &&\n            item.name !== 'None' &&\n            (!item.badges[0] || item.badges[0] === 'None')\n          \"\n        >\n          {{ initials(item.firstName, item.lastName) }}\n        </v-avatar>\n        <!-- If they are an admin and don't have a badge \n        (i don't think this should ever run because admin can't RSVP) -->\n        <v-badge\n          left\n          v-if=\"item.isAdmin\"\n          icon=\"mdi-wrench\"\n          bordered\n          overlap\n          color=\"grey darken-1\"\n        >\n          <v-avatar color=\"blue darken-1\" size=\"36\" class=\"white--text text-h7\">\n            {{ initials(item.firstName, item.lastName) }}\n          </v-avatar>\n        </v-badge>\n      </div>\n      <!-- <v-avatar\n        v-if=\"item.is_admin && !item.children\"\n        color=\"secondary\"\n        size=\"36\"\n        class=\"white--text text-h7\"\n        >{{ initials(item.firstName, item.lastName) }}\n      </v-avatar> -->\n    </template>\n  </v-treeview>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"MeetingStatusPanel\",\n  components: {},\n  props: {\n    going: Array,\n    maybe: Array,\n    notGoing: Array,\n    attendees: Array,\n    host_id: String,\n  },\n  data() {\n    return {\n      loggedInAccount: this.$cookie.get(\"auth-username\"),\n      user: \"\",\n      badgeColors: { Gold: \"#FFD700\", Silver: \"#C0C0C0\", Bronze: \"#CD7F32\" },\n    };\n  },\n  computed: {\n    items: function () {\n      const none = [\n        {\n          id: 5,\n          name: \"None\",\n          isAdmin: false,\n          badges: [],\n          firstName: \"\",\n          lastName: \"\",\n        },\n      ];\n      let tree = [\n        {\n          id: 1,\n          name: \"Going\",\n          children:\n            this.going && this.going.length !== 0\n              ? this.going.map((u) => this.convertUserToTreeStruct(u))\n              : none,\n        },\n        {\n          id: 2,\n          name: \"Maybe\",\n          children:\n            this.maybe && this.maybe.length !== 0\n              ? this.maybe.map((u) => this.convertUserToTreeStruct(u))\n              : none,\n        },\n        {\n          id: 3,\n          name: \"Not Going\",\n          children:\n            this.notGoing && this.notGoing.length !== 0\n              ? this.notGoing.map((u) => this.convertUserToTreeStruct(u))\n              : none,\n        },\n      ];\n      if (this.user._id === this.host_id) {\n        tree.push({\n          id: 4,\n          name: \"Attendees\",\n          children:\n            this.attendees && this.attendees.length !== 0\n              ? this.attendees.map((u) => this.convertUserToTreeStruct(u))\n              : none,\n        });\n      }\n      return tree;\n    },\n  },\n  methods: {\n    getUser() {\n      axios\n        .get(`/api/users/${this.loggedInAccount}`)\n        .then((response) => {\n          this.user = response.data;\n        })\n        .catch(() => {\n          this.user = \"\";\n        });\n    },\n    convertUserToTreeStruct(user) {\n      return {\n        name: \"@\" + user.username,\n        isAdmin: user.is_admin,\n        badges: user.badges,\n        firstName: user.first_name,\n        lastName: user.last_name,\n      };\n    },\n    initials: function (firstName, lastName) {\n      if (firstName && lastName) {\n        return firstName[0].toUpperCase() + lastName[0].toUpperCase();\n      }\n      return \"\";\n    },\n  },\n  mounted: function () {\n    this.getUser();\n  },\n};\n</script>\n\n<style>\n.v-treeview-node__root .v-treeview-node__prepend {\n  min-width: 0;\n}\n</style>\n"]}]}